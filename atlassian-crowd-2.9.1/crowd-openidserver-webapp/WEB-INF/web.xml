<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:/applicationContext-OpenIDBootstrap.xml,
            classpath:/applicationContext-OpenIDPersistence.xml,
            classpath:/applicationContext-OpenIDManagers.xml,
            classpath:/applicationContext-OpenIDUtils.xml,
            classpath:/applicationContext-OpenIDServer.xml,
        </param-value>
    </context-param>

    <filter>
        <filter-name>charsetFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <async-supported>true</async-supported>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>

    <filter>
        <filter-name>crowdSecurityFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter>
        <filter-name>UrlRewriteFilter</filter-name>
        <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
    </filter>

    <filter>
        <filter-name>struts2-prepare</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareFilter</filter-class>
        <!-- This filter isn't really async-supported. However, the excludePattern in struts.xml ensures that it will
              pass the only async request through (/v2/op) without any processing. -->
        <async-supported>true</async-supported>
    </filter>

    <filter>
        <filter-name>sessioninview</filter-name>
        <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
    </filter>

    <filter>
        <filter-name>sitemesh</filter-name>
        <filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
    </filter>

    <filter>
        <filter-name>struts2-execute</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsExecuteFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>charsetFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>struts2-prepare</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>

    <filter-mapping>
        <filter-name>crowdSecurityFilter</filter-name>
        <url-pattern>/secure/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>UrlRewriteFilter</filter-name>
        <url-pattern>/users/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>sessioninview</filter-name>
        <url-pattern>*.action</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>sitemesh</filter-name>
        <url-pattern>*.action</url-pattern>
        <url-pattern>*.jsp</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
    </filter-mapping>

    <filter-mapping>
        <filter-name>struts2-execute</filter-name>
        <url-pattern>*.action</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
    </filter-mapping>

    <listener>
        <listener-class>com.atlassian.crowd.openid.server.bootstrap.BootstrapLoaderListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.apache.struts2.dispatcher.ng.listener.StrutsListener</listener-class>
    </listener>

    <servlet>
        <servlet-name>OpenIDServerServlet</servlet-name>
        <servlet-class>com.atlassian.crowd.openid.server.servlet.OpenIDServerServlet</servlet-class>
    </servlet>

    <servlet>
        <servlet-name>OpenIDProviderServlet</servlet-name>
        <servlet-class>com.atlassian.crowd.openid.server.servlet.OpenIDProviderServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>OpenIDServerServlet</servlet-name>
        <url-pattern>/server.openid</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>OpenIDProviderServlet</servlet-name>
        <url-pattern>/op</url-pattern>
    </servlet-mapping>

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <error-page>
        <error-code>500</error-code>
        <location>/500.jsp</location>
    </error-page>

    <resource-ref>
        <res-ref-name>jdbc/CrowdIDDS</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>Includes</web-resource-name>
            <url-pattern>/include/*</url-pattern>
        </web-resource-collection>
        <auth-constraint/> <!-- No roles are allowed to access include files directly -->
    </security-constraint>


    <!-- Bootstrap Spray in a servlet -->
    <listener>
        <listener-class>spray.servlet.Initializer</listener-class>
    </listener>

    <servlet>
        <servlet-name>SprayConnectorServlet</servlet-name>
        <servlet-class>spray.servlet.Servlet30ConnectorServlet</servlet-class>
        <async-supported>true</async-supported>
    </servlet>

    <servlet-mapping>
        <servlet-name>SprayConnectorServlet</servlet-name>
        <url-pattern>/v2/*</url-pattern>
    </servlet-mapping>
</web-app>
